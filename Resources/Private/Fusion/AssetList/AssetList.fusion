prototype(Jonnitto.AssetList:AssetList) < prototype(Neos.Fusion:Tag) {
    assets = ${q(node).property('assets')}
    editable = true
    forceDownload = ${q(node).property('forceDownload')}
    thumbnail = ${q(node).property('thumbnail')}
    namespace = 'assets-list'
    assetsLength = ${Type.isArray(this.assets) ? Array.length(this.assets) : false}

    @context {
        assetsProperty = ${this.assets}
        assetsLength = ${this.assetsLength}
        editable = ${this.editable}
        forceDownload = ${this.forceDownload}
        thumbnail = ${this.thumbnail}
        namespace = ${this.namespace}
    }

    attributes.class = Neos.Fusion:RawArray {
        nodeType = 'jonnitto-assetlist'
        container = ${Configuration.setting('Jonnitto.AssetList.container')}
        list = ${namespace}
        assets = ${assetsLength ? namespace + '--count-' + assetsLength : false}
        thumbnail = ${namespace + (thumbnail ? '--thumbnail' : '--text')}
    }

    content = Neos.Fusion:Case {
        hasAssets {
            condition = ${assetsLength}
            renderer = Jonnitto.AssetList:Collection
        }
        default {
            condition = true
            renderer = Carbon.Notification:Backend {
                content = ${Translation.translate('content.emptyAssetList', null, [], 'NodeTypes/AssetList', 'Jonnitto.AssetList')}
            }
        }
    }

    @if.hasAssetsOrBackend = ${node.context.inBackend || this.assetsLength ? true : false}
    @process.contentElementWrapping {
        expression = Neos.Neos:ContentElementWrapping
        @if.editable = ${editable}
        @position = 'end 999999999'
    }
    @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}
